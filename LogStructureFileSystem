<!DOCTYPE HTML>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <meta name="Keywords" content="blog"/>
    <meta name="Description" content="blog"/>
    <title>Simple</title>
    <link rel="shortcut icon" href="/static/favicon.png"/>
    <link rel="stylesheet" type="text/css" href="/main.css" />
</head>
<body>
<div class="main">
    <div class="header">
    	<ul id="pages">
            <li><a href="/">home</a></li>
            <li><a href="/#/tags">tags</a></li>
            <li><a href="/#/archive">archive</a></li>
    	</ul>
    </div>
	<div class="wrap-header">
	<h1>
    <a href="/" id="title"></a>
	</h1>
	</div>
<div id="md" style="display: none;">
<!-- markdown -->
先来扯淡，这篇博客讲的是LFS，之前写的[硬盘与磁盘冗余阵列](http://xubenbenhit.github.io/HardDiskAndRAID.html)其实是第一篇，而这个应该算是第三篇，这中间差了一篇介绍文件系统的博客，原本打算今天回去之后一起写了，但是考虑到自己回家之后的效率不敢保证。故而先在实验室写完这个文章，而文件系统的资料全部在家。
##1. 什么是LFS？
　　首先回顾一下我们是怎么来写Log文件的，不就是把最新的状态一行一行的写在日志文件的最末尾么（这个联系是我自己YY的）。那么**Log-structured File System**也是一样，就是更新数据的时候直接将数据放在末尾。如下图：  
　　一开始，我们写入磁盘数据块Foo，然后旁边的A是它的inode：![](http://7te99v.com1.z0.glb.clouddn.com/blog/LFS/log-1.png)  
　　然后，我们再写入块Bar，旁边的A'是inode：![](http://7te99v.com1.z0.glb.clouddn.com/blog/LFS/log-2.png)  
　　最后，我们更新数据块Foo，获得Foo'，这时候我们将其写回磁盘，就变成这样子：![](http://7te99v.com1.z0.glb.clouddn.com/blog/LFS/log-3.png)


##2. LFS是怎么来的？
　　LFS是在上个世纪九十年代前后搞出来的，当时的主要考虑有这个几点（道听途说）：

>- 内存越来越大，进而可以不断扩充Cache的容量，也就会意味着数据读取操作可以越来越不需要访问磁盘了，进而使得磁盘写操作越来也成为性能瓶颈；

>- 序列磁盘数据读取速度跟随机读取磁盘数据速度的差距越来越大，这种情况下如果可以将随机磁盘操作转换为序列磁盘操作，则收益可观；

>- 处理小文件的时候，之前的文件系统效率不高，而事实上小文件才是常见的；此外对于小文件的写操作，磁盘本身也不擅长，因为RAID4/RAID5处理小文件的时候性能也是不高的；   
  
　　因为有了这些，所以就有了**LFS**。**LFS**首先将磁盘数据的更新缓存在Cache中，当缓存到一定规模(称之为一个segment)的时候再一次性写入磁盘，由此获得高性能。
　　当然了，说起来很简单，做起来就不是喽，这里面主要有两个方面的问题：其一是整个操作过程中的文件定位；其二是磁盘空间管理。

##3. 文件定位
<!-- markdown end -->
</div>
<div class="entry" id="main">
<!-- content -->
<p>先来扯淡，这篇博客讲的是LFS，之前写的<a href="http://xubenbenhit.github.io/HardDiskAndRAID.html">硬盘与磁盘冗余阵列</a>其实是第一篇，而这个应该算是第三篇，这中间差了一篇介绍文件系统的博客，原本打算今天回去之后一起写了，但是考虑到自己回家之后的效率不敢保证。故而先在实验室写完这个文章，而文件系统的资料全部在家。</p>

<h2 id="1lfs">1. 什么是LFS？</h2>

<p>　　首先回顾一下我们是怎么来写Log文件的，不就是把最新的状态一行一行的写在日志文件的最末尾么（这个联系是我自己YY的）。那么<strong>Log-structured File System</strong>也是一样，就是更新数据的时候直接将数据放在末尾。如下图： <br>
　　一开始，我们写入磁盘数据块Foo，然后旁边的A是它的inode：<img src="http://7te99v.com1.z0.glb.clouddn.com/blog/LFS/log-1.png" alt="" title=""> <br>
　　然后，我们再写入块Bar，旁边的A'是inode：<img src="http://7te99v.com1.z0.glb.clouddn.com/blog/LFS/log-2.png" alt="" title=""> <br>
　　最后，我们更新数据块Foo，获得Foo'，这时候我们将其写回磁盘，就变成这样子：<img src="http://7te99v.com1.z0.glb.clouddn.com/blog/LFS/log-3.png" alt="" title=""></p>

<h2 id="2lfs">2. LFS是怎么来的？</h2>

<p>　　LFS是在上个世纪九十年代前后搞出来的，当时的主要考虑有这个几点（道听途说）：</p>

<blockquote>
  <ul>
  <li><p>内存越来越大，进而可以不断扩充Cache的容量，也就会意味着数据读取操作可以越来越不需要访问磁盘了，进而使得磁盘写操作越来也成为性能瓶颈；</p></li>
  <li><p>序列磁盘数据读取速度跟随机读取磁盘数据速度的差距越来越大，这种情况下如果可以将随机磁盘操作转换为序列磁盘操作，则收益可观；</p></li>
  <li><p>处理小文件的时候，之前的文件系统效率不高，而事实上小文件才是常见的；此外对于小文件的写操作，磁盘本身也不擅长，因为RAID4/RAID5处理小文件的时候性能也是不高的；   </p></li>
  </ul>
</blockquote>

<p>　　因为有了这些，所以就有了<strong>LFS</strong>。<strong>LFS</strong>首先将磁盘数据的更新缓存在Cache中，当缓存到一定规模(称之为一个segment)的时候再一次性写入磁盘，由此获得高性能。
　　当然了，说起来很简单，做起来就不是喽，这里面主要有两个方面的问题：其一是整个操作过程中的文件定位；其二是磁盘空间管理。</p>

<h2 id="3">3. 文件定位</h2>
<!-- content end -->
</div>
<br>
<br>
    <div id="disqus_thread"></div>
	<div class="footer">
		<p>© Copyright 2014 by isnowfy, Designed by isnowfy</p>
	</div>
</div>
<script src="main.js"></script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ["\\(", "\\)"]], processEscapes: true}});
</script>
<script id="content" type="text/mustache">
    <h1>{{title}}</h1>
    <div class="tag">
    {{date}}
    {{#tags}}
    <a href="/#/tag/{{name}}">#{{name}}</a>
    {{/tags}}
    </div>
</script>
<script id="pagesTemplate" type="text/mustache">
    {{#pages}}
    <li>
        <a href="{{path}}">{{title}}</a>
    </li>
    {{/pages}}
</script>
<script>
$(document).ready(function() {
    $.ajax({
        url: "main.json",
        type: "GET",
        dataType: "json",
        success: function(data) {
            $("#title").html(data.name);
            var pagesTemplate = Hogan.compile($("#pagesTemplate").html());
            var pagesHtml = pagesTemplate.render({"pages": data.pages});
            $("#pages").append(pagesHtml);
            //path
            var path = "LogStructureFileSystem";
            //path end
            var now = 0;
            for (var i = 0; i < data.posts.length; ++i)
                if (path == data.posts[i].path)
                    now = i;
            var post = data.posts[now];
            var tmp = post.tags.split(" ");
            var tags = [];
            for (var i = 0; i < tmp.length; ++i)
                if (tmp[i].length > 0)
                    tags.push({"name": tmp[i]});
            var contentTemplate = Hogan.compile($("#content").html());
            var contentHtml = contentTemplate.render({"title": post.title, "tags": tags, "date": post.date});
            $("#main").prepend(contentHtml);
            if (data.disqus_shortname.length > 0) {
                var disqus_shortname = data.disqus_shortname;
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            }
        }
    });
});
</script>
</body>
</html>
